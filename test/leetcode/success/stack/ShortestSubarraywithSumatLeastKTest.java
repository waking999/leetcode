package leetcode.success.stack;

import common.Util;
import leetcode.success.stack.ShortestSubarraywithSumatLeastK;
import org.junit.jupiter.api.Test;

public class ShortestSubarraywithSumatLeastKTest {
    @Test
    public void test1() {
        ShortestSubarraywithSumatLeastK s = new ShortestSubarraywithSumatLeastK();

        int[] A;
        int K;
        int expect;
        int output;
        int seq = 1;

        long start=System.nanoTime();

//        A = new int[]{1};
//        K = 1;
//        expect = 1;
//        output = s.shortestSubarray(A, K);
//        Util.verify(expect, output, seq++);
//
//        A = new int[]{1, 2};
//        K = 4;
//        expect = -1;
//        output = s.shortestSubarray(A, K);
//        Util.verify(expect, output, seq++);
//
//
//        A = new int[]{2, -1, 2};
//        K = 3;
//        expect = 3;
//        output = s.shortestSubarray(A, K);
//        Util.verify(expect, output, seq++);
//
//
//        A = new int[]{77, 19, 35, 10, -14};
//        K = 19;
//        expect = 1;
//        output = s.shortestSubarray(A, K);
//        Util.verify(expect, output, seq++);
//
//
        A = new int[]{17, 85, 93, -45, -21};
        K = 150;
        expect = 2;
        output = s.shortestSubarray(A, K);
        Util.verify(expect, output, seq++);
//
//        A = new int[]{-22, 73, -28, 62, 4, -21, -39, -21, -26, 47, 79, 64, 15, 86, -20, -7, -24, -5, 21, 73};
//        K = 87;
//        expect = 2;
//        output = s.shortestSubarray(A, K);
//        Util.verify(expect, output, seq++);
//
//        A = new int[]{-47, 45, 92, 86, 17, -22, 77, 62, -1, 42};
//        K = 180;
//        expect = 3;
//        output = s.shortestSubarray(A, K);
//        Util.verify(expect, output, seq++);
//
//        A = new int[]{-23, 51, -14, -6, 36, 33, 76, -26, -6, 58, -16, 1, 98, 2, -20, 48, -19, -41, -34, 62};
//        K = 221;
//        expect = 9;
//        output = s.shortestSubarray(A, K);
//        Util.verify(expect, output, seq++);

        A = new int[]{-34, 37, 51, 3, -12, -50, 51, 100, -47, 99, 34, 14, -13, 89, 31, -14, -44, 23, -38, 6};
        K = 151;
        expect = 2;
        output = s.shortestSubarray(A, K);
        Util.verify(expect, output, seq++);
//
//        A = new int[]{50794, 73683, 43162, 66528, 94958, -46678, 29835, 6598, 28966, 50644, 25061, 41941, 20342, 4731, 81995, 92244, 14120, 74565, -7594, 82273, 8420, -30048, -19402, 17709, -28100, -30214, -40444, -43819, 23107, -333, 16503, -47179, 11469, -10072, -15801, 51458, 32970, -25433, 43444, -45779, 19814, -22683, 71867, 30849, 25578, 69862, 73092, -7947, 33630, -4959, -10326, 41573, 9540, 14023, -40203, 39297, 29723, 89931, 98956, -15696, 37830, 19067, 85795, 27632, -39559, -34491, 159, -16283, -25614, 27239, -37105, -11261, -2868, 21052, -2695, -30701, -35337, 83438, -977, -1601, 45415, 3357, 80421, 40750, 73362, 76262, -32708, 32474, -34140, 3962, 61708, 56597, 13012, 57775, -4174, 72718, 21225, 45122, 5081, 28569};
//        K = 185822;
//        expect = 2;
//        output = s.shortestSubarray(A, K);
//        Util.verify(expect, output, seq++);
//
//        A = new int[]{58352, -31435, 90116, -31116, -1531, 82141, 35710, 77168, -37977, 61756, -9980, -30557, 98059, -24863, -6124, 45419, -45113, -20887, -31944, 57285, 96049, -9393, 3697, 11321, 59994, -44974, 91450, -46195, 89285, 46074, -35117, -20828, 75907, 26098, -44758, 5065, 45921, 69817, 44523, 70785, 46731, -11239, -20189, 62485, 38793, 61356, 48918, 91572, -45767, 24915, 14528, 16253, 83747, 25900, 57460, 93563, 59045, -570, 56215, -15973, -41947, -25558, -16519, 28367, 61688, -29771, 5615, 78372, -8343, 95029, -42453, 81210, 50752, 71672, 11192, 48674, -1089, -5338, 43274, 88388, 69068, 34704, -19883, -42126, -7594, 51660, 7282, 12226, 50592, 1044, -14291, 6934, 13807, -31354, 13230, 52594, 24649, 69293, 5387, 43435, 79758, -48681, 5627, -14207, 70208, -17292, 8026, 56944, 47395, -25078, 11740, 24291, -20877, -45324, 1293, 3707, 98699, 58562, 3351, -1226, 32896, 60109, 21970, -35594, -1215, 73914, 52689, 33092, -44588, 35398, -21684, 47374, 38682, 36347, -3553, 70615, -27873, -5145, 6782, 38735, 28903, 82642, 15318, 57311, 26624, 86364, -29631, -27333, -24731, -7770, 74971, 84374, 9461, 51936, 34835, 1444, 15328, 74396, 93707, -32511, -29442, 8504, -20643, 52366, -16152, 58843, 9083, -8310, 11444, 97639, -37440, 29789, 6380, 61828, 11642, -12589, -7088, 56602, 58323, 95893, 35964, -18235, 70623, 83088, 28911, 26460, 4031, 35606, 92021, -9706, -6708, -40732, 28970, 14936, -3607, -33323, 67733, 26422, 43530, 51988};
//        K = 93583;
//        expect = 1;
//        output = s.shortestSubarray(A, K);
//        Util.verify(expect, output, seq++);

        long end=System.nanoTime();

        System.out.println((end-start)+" nsec.");

    }

}
